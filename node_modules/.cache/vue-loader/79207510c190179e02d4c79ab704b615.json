{"remainingRequest":"C:\\Users\\hp\\Documents\\VueJS\\Colite-master\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\hp\\Documents\\VueJS\\Colite-master\\frontend\\src\\views\\Map.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\hp\\Documents\\VueJS\\Colite-master\\frontend\\src\\views\\Map.vue","mtime":1606230229687},{"path":"C:\\Users\\hp\\Documents\\VueJS\\Colite-master\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\hp\\Documents\\VueJS\\Colite-master\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\hp\\Documents\\VueJS\\Colite-master\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\hp\\Documents\\VueJS\\Colite-master\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBheGlvcyBmcm9tICdheGlvcycKaW1wb3J0IFhMU1ggZnJvbSAneGxzeCcKaW1wb3J0IHRyYW5zZm9ybVNoZWV0cyBmcm9tICcuL3JlYWRYbHguanMnCmltcG9ydCB7bG9jYXRpb25zfSBmcm9tICcuL2RhdGEuanMnCgoKCgogCgogIGNvbnN0IGRhdGFPYmogPSB7CiAgICBsYXQ6IDYuNDY1NDIyLAogICAgbG5nOiAzLjQwNjQ0OAogIH07CiAgZXhwb3J0IGRlZmF1bHQgewogICAgbmFtZTogIkdvb2dsZU1hcCIsCiAgICBkYXRhKCkgewogICAgICBjb25zb2xlLmxvZygnZGF0YScpCiAgICAKICAgICAgcmV0dXJuIHsKICAgICAgICBjb250ZW50OicnLAogICAgICAgIGVycjogJ2xPamhzaCcsCiAgICAgICAgY2VudGVyOiB7bGF0OiBkYXRhT2JqLmxhdCwgbG5nOiBkYXRhT2JqLmxuZ30sCiAgICAgICAgbWFwOiBudWxsLAogICAgICAgIGluZm9Db250ZW50OiAnJywKICAgICAgICBpbmZvV2luZG93UG9zOiB7CiAgICAgICAgICBsYXQ6IDAsCiAgICAgICAgICBsbmc6IDAKICAgICAgICB9LAogICAgICAgIGluZm9XaW5PcGVuOiBmYWxzZSwKICAgICAgICBjdXJyZW50TWlkeDogbnVsbCwKICAgICAgICAvL29wdGlvbmFsOiBvZmZzZXQgaW5mb3dpbmRvdyBzbyBpdCB2aXN1YWxseSBzaXRzIG5pY2VseSBvbiB0b3Agb2Ygb3VyIG1hcmtlcgogICAgICAgIGluZm9PcHRpb25zOiB7CiAgICAgICAgICBwaXhlbE9mZnNldDogewogICAgICAgICAgICB3aWR0aDogMCwKICAgICAgICAgICAgaGVpZ2h0OiAtMzUKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIG1hcmtlcnM6ICcnCiAgICAgIH07CiAgICB9LAogICAgbW91bnRlZCgpIHsKICAgICBjb25zb2xlLmxvZyh0aGlzLm1hcmtlcnMpCiAgICAgCiAgICAgdGhpcy4kcmVmcy5nbWFwLiRtYXBQcm9taXNlLnRoZW4oKG1hcCkgPT4gewogICAgICAgIGNvbnN0IGJvdW5kcyA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmdCb3VuZHMoKQogICAgICAgIGZvciAobGV0IG0gb2YgdGhpcy5tYXJrZXJzKSB7CiAgICAgICAgICBjb25zb2xlLmxvZyhtKQogICAgICAgICAgYm91bmRzLmV4dGVuZChtLnBvc2l0aW9uKQogICAgICAgIH0KICAgICAgICBtYXAuZml0Qm91bmRzKGJvdW5kcyk7CiAgICAgIH0pOwogICAKCiAgICAKICAgICAKCiAgICB9LAoKCgogIGNyZWF0ZWQoKSB7CiAgICB2YXIgdXJsID0gIi4vdGVzdG1hcC54bHN4IiAvLyBGaWxlcyBwbGFjZWQgaW4gdGhlIHB1YmxpYyBkaXJlY3RvcnkgY2FuIGJlIGFjY2Vzc2VkIGRpcmVjdGx5CgogICAgICAgYXhpb3MuZ2V0KHVybCwge3Jlc3BvbnNlVHlwZTonYXJyYXlidWZmZXInfSkKICAgIC50aGVuKChyZXMpID0+IHsKICAgIHZhciBkYXRhID0gbmV3IFVpbnQ4QXJyYXkocmVzLmRhdGEpCiAgICB2YXIgd2IgPSBYTFNYLnJlYWQoZGF0YSwge3R5cGU6ImFycmF5In0pCiAgICB2YXIgc2hlZXRzID0gd2IuU2hlZXROYW1lc1swXTsKICAgICBsZXQgd29ya3NoZWV0ID0gd2IuU2hlZXRzW3NoZWV0c107CiAgICB0aGlzLm1hcmtlcnMgPSBYTFNYLnV0aWxzLnNoZWV0X3RvX2pzb24od29ya3NoZWV0KS5tYXAoKHRyYW5zZm9ybSkgPT4gewogICAgcmV0dXJuIHsKICAgICAgLi4udHJhbnNmb3JtLCBwb3NpdGlvbjogewogICAgICAgIGxhdDogdHJhbnNmb3JtLkxhdGl0dWRlLAogICAgICAgIGxuZzogdHJhbnNmb3JtLkxvbmdpdHVkZQogICAgICB9CiAgICB9CiAgICAgIAogICAgfSkKICAgIGNvbnNvbGUubG9nKHRoaXMubWFya2VycykKICAgICB0aGlzLiRyZWZzLmdtYXAuJG1hcFByb21pc2UudGhlbigobWFwKSA9PiB7CiAgICAgICAgY29uc3QgYm91bmRzID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZ0JvdW5kcygpCiAgICAgICAgZm9yIChsZXQgbSBvZiB0aGlzLm1hcmtlcnMpIHsKICAgICAgICAgIGNvbnNvbGUubG9nKG0pCiAgICAgICAgICBib3VuZHMuZXh0ZW5kKG0ucG9zaXRpb24pCiAgICAgICAgfQogICAgICAgIG1hcC5maXRCb3VuZHMoYm91bmRzKTsKICAgICAgfSk7CiAgICB9KS5jYXRjaCggZXJyID0+ewogICAgICB0aGlzLmVyciA9IGVycgogICAgfSkKICAgIAogICAKICB9LAoKICAgIAoKCiAgIAogICAgbWV0aG9kczogewogICAgICB0b2dnbGVJbmZvV2luZG93OiBmdW5jdGlvbiAobWFya2VyLCBpZHgpIHsKICAgICAgICAKICAgICAgICB0aGlzLmluZm9XaW5kb3dQb3MgPSBtYXJrZXIucG9zaXRpb24KICAgICAgICB0aGlzLmluZm9Db250ZW50ID0gdGhpcy5nZXRJbmZvV2luZG93Q29udGVudChtYXJrZXIpOwogICAgICAgIAoKICAgICAgICAvL2NoZWNrIGlmIGl0cyB0aGUgc2FtZSBtYXJrZXIgdGhhdCB3YXMgc2VsZWN0ZWQgaWYgeWVzIHRvZ2dsZQogICAgICAgIGlmICh0aGlzLmN1cnJlbnRNaWR4ID09IGlkeCkgewogICAgICAgICAgdGhpcy5pbmZvV2luT3BlbiA9ICF0aGlzLmluZm9XaW5PcGVuOwogICAgICAgIH0KICAgICAgICAvL2lmIGRpZmZlcmVudCBtYXJrZXIgc2V0IGluZm93aW5kb3cgdG8gb3BlbiBhbmQgcmVzZXQgY3VycmVudCBtYXJrZXIgaW5kZXgKICAgICAgICBlbHNlIHsKICAgICAgICAgIHRoaXMuaW5mb1dpbk9wZW4gPSB0cnVlOwogICAgICAgICAgdGhpcy5jdXJyZW50TWlkeCA9IGlkeDsKICAgICAgICB9CiAgICAgIH0sCgogICAgICAKCiAgICAgCiAgICAgIGdldEluZm9XaW5kb3dDb250ZW50OiBmdW5jdGlvbiAobWFya2VyKSB7CiAgICAgICAgcmV0dXJuIChgPGRpdiBjbGFzcz0iY2FyZCI+CiAgCiAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgIAogICAgPGRpdiBjbGFzcz0iY29udGVudCBwdC0zIj4KICAgICAgPHA+TGF0aXR1ZGUgOiAke21hcmtlci5wb3NpdGlvbi5sYXR9IDxwIC8+CiAgICAgPHA+TG9uZ2l0dWRlOiAke21hcmtlci5wb3NpdGlvbi5sbmd9IDwvcD4KICAgICAgPHAgY2xhc3M9IiI+Um1wIDogJHttYXJrZXIuUlBNfTwvcD4KICAgICAgPHAgY2xhc3M9IiI+RGF0ZSA6ICR7bWFya2VyLkRhdGV9PC9wPgoKCiAgICAgCiAgICAgIAogICAgPC9kaXY+CiAgPC9kaXY+CjwvZGl2PmApOwogICAgICB9LAogICAgfQogIH07CgoK"},{"version":3,"sources":["Map.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;;;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;;;;AAMA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA","file":"Map.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"map\">\n    <h1>Welcome to the map of all active parts page!</h1>\n  \n    <div>\n    <gmap-map\n      ref=\"gmap\"\n      :center=\"{ lat: 36.778259, lng: -119.417931\n }\"\n      :zoom=\"10\"\n      style=\"width:100%;  height: 100vh;\"\n    >\n      \n      <gmap-marker\n        :key=\"index\"\n        v-for=\"(m, index) in markers\"\n        :position=\"m.position\"\n        @click=\"toggleInfoWindow(m,index)\">\n      </gmap-marker>\n\n      <gmap-info-window\n        :options=\"infoOptions\"\n        :position=\"infoWindowPos\"\n        :opened=\"infoWinOpen\"\n        @closeclick=\"infoWinOpen=false\"\n      >\n        <div v-html=\"infoContent\"></div>\n      </gmap-info-window>\n\n    </gmap-map>\n  </div>\n    \n    \n\n    \n  </div>\n  \n\n\n  \n</template>\n\n<script>\nimport axios from 'axios'\nimport XLSX from 'xlsx'\nimport transformSheets from './readXlx.js'\nimport {locations} from './data.js'\n\n\n\n\n \n\n  const dataObj = {\n    lat: 6.465422,\n    lng: 3.406448\n  };\n  export default {\n    name: \"GoogleMap\",\n    data() {\n      console.log('data')\n    \n      return {\n        content:'',\n        err: 'lOjhsh',\n        center: {lat: dataObj.lat, lng: dataObj.lng},\n        map: null,\n        infoContent: '',\n        infoWindowPos: {\n          lat: 0,\n          lng: 0\n        },\n        infoWinOpen: false,\n        currentMidx: null,\n        //optional: offset infowindow so it visually sits nicely on top of our marker\n        infoOptions: {\n          pixelOffset: {\n            width: 0,\n            height: -35\n          }\n        },\n        markers: ''\n      };\n    },\n    mounted() {\n     console.log(this.markers)\n     \n     this.$refs.gmap.$mapPromise.then((map) => {\n        const bounds = new google.maps.LatLngBounds()\n        for (let m of this.markers) {\n          console.log(m)\n          bounds.extend(m.position)\n        }\n        map.fitBounds(bounds);\n      });\n   \n\n    \n     \n\n    },\n\n\n\n  created() {\n    var url = \"./testmap.xlsx\" // Files placed in the public directory can be accessed directly\n\n       axios.get(url, {responseType:'arraybuffer'})\n    .then((res) => {\n    var data = new Uint8Array(res.data)\n    var wb = XLSX.read(data, {type:\"array\"})\n    var sheets = wb.SheetNames[0];\n     let worksheet = wb.Sheets[sheets];\n    this.markers = XLSX.utils.sheet_to_json(worksheet).map((transform) => {\n    return {\n      ...transform, position: {\n        lat: transform.Latitude,\n        lng: transform.Longitude\n      }\n    }\n      \n    })\n    console.log(this.markers)\n     this.$refs.gmap.$mapPromise.then((map) => {\n        const bounds = new google.maps.LatLngBounds()\n        for (let m of this.markers) {\n          console.log(m)\n          bounds.extend(m.position)\n        }\n        map.fitBounds(bounds);\n      });\n    }).catch( err =>{\n      this.err = err\n    })\n    \n   \n  },\n\n    \n\n\n   \n    methods: {\n      toggleInfoWindow: function (marker, idx) {\n        \n        this.infoWindowPos = marker.position\n        this.infoContent = this.getInfoWindowContent(marker);\n        \n\n        //check if its the same marker that was selected if yes toggle\n        if (this.currentMidx == idx) {\n          this.infoWinOpen = !this.infoWinOpen;\n        }\n        //if different marker set infowindow to open and reset current marker index\n        else {\n          this.infoWinOpen = true;\n          this.currentMidx = idx;\n        }\n      },\n\n      \n\n     \n      getInfoWindowContent: function (marker) {\n        return (`<div class=\"card\">\n  \n  <div class=\"card-content\">\n    \n    <div class=\"content pt-3\">\n      <p>Latitude : ${marker.position.lat} <p />\n     <p>Longitude: ${marker.position.lng} </p>\n      <p class=\"\">Rmp : ${marker.RPM}</p>\n      <p class=\"\">Date : ${marker.Date}</p>\n\n\n     \n      \n    </div>\n  </div>\n</div>`);\n      },\n    }\n  };\n\n\n</script>\n\n\n\n<style>\n\n.map {\n  background-color: #2c3e50;\n  /* min-height: 100%; */\n  /* height: 100%; */\n  height: 100vh;\n}\n</style>\n"]}]}